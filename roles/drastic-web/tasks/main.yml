---
##############################################################################
# Create the virtualenv where we will host the drastic-web app
##############################################################################
- name: update apt-cache
  apt: update_cache=yes cache_valid_time="{{ 60*60*24 }}"

- name: install packages for drastic web-ui
  apt: pkg={{ item }} state=installed
  with_items:
    - nginx
    - expect
    - libldap2-dev
    - libsasl2-dev
    - virtualenv
    - python-dev

- name: Install Global Python modules
  pip:
    name=pexpect

- include: localpython.yml

- name: Manually create the webapp virtualenv
  command: virtualenv -p "{{ install_dir }}/localpython/bin/python2.7" "{{ install_dir }}/web" creates="{{ install_dir }}/web"

- name: Clone git repo
  git: repo="https://github.com/UMD-DRASTIC/drastic-web.git"
       dest="{{ install_dir }}/web/project"
       accept_hostkey=yes
       force=yes
       update=yes
  when: not deploy_local_code
  tags: code

- name: Copy local drastic-web sources
  synchronize:
    src: ../../../drastic-web/
    dest: "{{ install_dir }}/web/project"
    recursive: yes
  when: deploy_local_code
  tags: code

- name: Install requirements
  pip:
    requirements="{{ install_dir }}/web/project/requirements.txt"
    virtualenv="{{ install_dir }}/web"
  tags: code

- name: Install drastic lib into webapp
  shell: "{{ install_dir }}/web/bin/python setup.py develop"
  args:
    chdir: "{{ install_dir }}/drastic"
  tags: code

- file:
    path: "{{ install_dir }}"
    state: directory
    owner: drastic
    recurse: yes

- name: Copy Drastic-web init script
  template: src=drastic-web.service dest=/etc/systemd/system/drastic-web.service

- name: Create sysconfig directory
  file:
    path=/etc/sysconfig
    state=directory

- name: Copy Drastic-web init script variables
  template: src=drastic-env dest=/etc/sysconfig/drastic-env

- name: Create the drastic tables (sync db)
  command: "{{ install_dir }}/web/bin/drastic-admin create -c settings"
  environment:
    CQLSH_NO_BUNDLED: TRUE
  ignore_errors: yes

- name: Collect static
  command: "{{ install_dir }}/web/bin/python {{ install_dir }}/web/project/manage.py collectstatic --noinput"

- name: Make migrations for the Django database
  django_manage: command=makemigrations app_path="{{ install_dir }}/web/project" virtual_env="{{ install_dir }}/web/"
  tags: mark

- name: Initialise Django database
  django_manage: command=migrate app_path="{{ install_dir }}/web/project" virtual_env="{{ install_dir }}/web/"

- name: Create the root collection
  command: "{{ install_dir }}/web/bin/drastic-admin root-collection-create -c settings"
  environment:
    CQLSH_NO_BUNDLED: TRUE
  ignore_errors: yes

- name: Create default users
  script: init_user.expect "{{ install_dir }}" "{{ item.user_name }}" "{{ item.password }}" "{{ item.admin }}"
  ignore_errors: yes
  with_items:
    - { user_name: drastic, password: "{{ drastic_app_password }}", admin: y }
    - { user_name: guest, password: guest, admin: n }

- name: Create default groups
  command: "{{ install_dir }}/web/bin/drastic-admin group-create {{ item.group }}"
  with_items:
    - { group: drastic }
    - { group: guest }

- name: Add users to groups
  command: "{{ install_dir }}/web/bin/drastic-admin group-add-user {{ item.group }} {{ item.user }}"
  with_items:
    - { group: drastic, user: drastic }
    - { group: guest, user: guest }

- file:
    path: "{{ install_dir }}"
    state: directory
    owner: drastic
    recurse: yes

- name: Install packages for LDAP
  apt: pkg={{ item }} state=installed
  with_items:
    - python-dev
    - libldap2-dev
    - libsasl2-dev
    - libssl-dev
  when: LDAP_SERVER_URI is defined

- name: Install LDAP modules
  pip:
    name={{ item }}
    virtualenv="{{ install_dir }}/web"
  with_items:
    - python-ldap
  when: LDAP_SERVER_URI is defined

- name: Create HTTP nginx config
  template: src=drastic-web.nginx dest=/etc/nginx/sites-available/drastic_http

- name: Create HTTPS nginx config
  template: src=drastic-web-ssl.nginx dest=/etc/nginx/sites-available/drastic_https

- name: Create SSL directory for nginx
  file: path=/etc/nginx/ssl state=directory

- name: Retrieves facts for SSL certificate
  stat: path=/etc/nginx/ssl/nginx.crt
  register: ssl_certificate

- name: Retrieves facts for SSL key
  stat: path=/etc/nginx/ssl/nginx.key
  register: ssl_key

- name: Self-sign SSL Certificate when not present
  expect:
    command: openssl req -new -x509 -sha256 -newkey rsa:2048 -days 365 -nodes -out nginx.crt -keyout nginx.key
    chdir: /etc/nginx/ssl
    responses:
      Country Name (.*): "US"
      State (.*): "Maryland"
      Locality (.*): "College Park"
      Organization Name (.*): "University of Maryland"
      Organizational Unit Name(.*): "School of Information Studies"
      Common Name (.*): "Team Drastic"
      Email (.*): "jansen@umd.edu"
  when: (ssl_certificate.stat.exists == False) or
        (ssl_key.stat.exists == False)

- name: Delete default nginx config for enabled site
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: Delete nginx config for https mode when http mode
  file: path=/etc/nginx/sites-enabled/drastic_https state=absent
  when: not https_mode

- name: Delete nginx config for http mode when https mode
  file: path=/etc/nginx/sites-enabled/drastic_http state=absent
  when: https_mode

- name: Copy nginx config for https mode
  file: src=/etc/nginx/sites-available/drastic_https dest=/etc/nginx/sites-enabled/drastic_https state=link
  when: https_mode

- name: Copy nginx config for http mode
  file: src=/etc/nginx/sites-available/drastic_http dest=/etc/nginx/sites-enabled/drastic_http state=link
  when: not https_mode

- name: Create NGINX server locations include folder
  file: path=/etc/nginx/location-include state=directory

- name: Start nginx
  service: name=nginx state=restarted

- name: Start the Drastic web service
  service: name=drastic-web state=restarted enabled=yes
  register: drastic-web-installed
  tags: code
