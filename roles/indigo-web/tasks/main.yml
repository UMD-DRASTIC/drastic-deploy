---
##############################################################################
# Create the virtualenv where we will host the indigo-web app
##############################################################################

- name: update apt-cache
  apt: update_cache=yes
  become: yes
  become_method: sudo

- name: install packages for indigo web-ui
  apt: pkg={{ item }} state=installed
  with_items:
    - nginx
    - expect
    - libldap2-dev
    - libsasl2-dev
    - virtualenv
  become: yes
  become_method: sudo

- name: Install Global Python modules
  pip:
    name=pexpect
  become: yes
  become_method: sudo

- name: Manually create the webapp virtualenv
  command: virtualenv "{{ install_dir }}/web" creates="{{ install_dir }}/web"

- name: Clone git repo
#  git: repo="/home/alloy/tmp/indigo_git/indigo-web.git"
  git: repo="git@bitbucket.org:archivea/indigo-web.git"
       dest="{{ install_dir }}/web/project"
       key_file="{{ install_dir }}/.ssh/indigo_deployment_private_key"
       accept_hostkey=yes
       force=yes
       update=yes
       version=develop

- name: Install requirements
  pip:
    requirements="{{ install_dir }}/web/project/requirements.txt"
    virtualenv="{{ install_dir }}/web"

- name: Install indigo lib into webapp
  shell: "{{ install_dir }}/web/bin/python setup.py develop"
  args:
    chdir: "{{ install_dir }}/indigo"

- name: Copy Indigo-web init script
  template: src=indigo-web.service dest=/etc/systemd/system/indigo-web.service
  become: yes
  become_method: sudo

- name: Create sysconfig directory
  file: 
    path=/etc/sysconfig
    state=directory
  become: yes
  become_method: sudo 

- name: Copy Indigo-web init script variables
  template: src=indigo-env dest=/etc/sysconfig/indigo-env
  become: yes
  become_method: sudo

- name: Create the cassandra database
  command: "{{ install_dir }}/web/bin/indigo create -c settings"

- name: Collect static
  command: "{{ install_dir }}/web/bin/python {{ install_dir }}/web/project/manage.py collectstatic --noinput"

- name: Initialise Django database
  django_manage: command=syncdb app_path="{{ install_dir }}/web/project" virtual_env="{{ install_dir }}/web/"

- name: Set up database
  command: "{{ install_dir }}/web/bin/python {{ install_dir }}/web/bin/indigo create"

#- name: Create default users
#  script: init_user.expect "{{ install_dir }}" "{{ item.user_name }}" "{{ item.password }}" "{{ item.admin }}"
#  ignore_errors: yes
#  with_items:
#    - { user_name: indigo, password: indigo, admin: y }
#    - { user_name: guest, password: guest, admin: n }

#- name: Create default groups
#  command: "{{ install_dir }}/web/bin/python {{ install_dir }}/web/bin/indigo group-create {{ item.group }}"
#  with_items:
#    - { group: indigo }
#    - { group: guest }

#- name: Add users to groups
#  command: "{{ install_dir }}/web/bin/python {{ install_dir }}/web/bin/indigo group-add-user {{ item.group }} {{ item.user }}"
#  with_items:
#    - { group: indigo, user: indigo }
#    - { group: guest, user: guest }

- name: Install packages for LDAP
  apt: pkg={{ item }} state=installed
  with_items:
    - python-dev
    - libldap2-dev
    - libsasl2-dev
    - libssl-dev
  become: yes
  become_method: sudo
  when: LDAP_SERVER_URI is defined

- name: Install LDAP modules
  pip:
    name={{ item }}
    virtualenv="{{ install_dir }}/web"
  with_items:
    - python-ldap
  when: LDAP_SERVER_URI is defined

- name: Create HTTP nginx config
  template: src=indigo-web.nginx dest=/etc/nginx/sites-available/indigo_http
  become: yes
  become_method: sudo

- name: Create HTTPS nginx config
  template: src=indigo-web-ssl.nginx dest=/etc/nginx/sites-available/indigo_https
  become: yes
  become_method: sudo

- name: Create SSL directory for nginx
  file: path=/etc/nginx/ssl state=directory
  become: yes
  become_method: sudo

- name: Retrieves facts for SSL certificate
  stat: path=/etc/nginx/ssl/nginx.crt
  register: ssl_certificate

- name: Retrieves facts for SSL key
  stat: path=/etc/nginx/ssl/nginx.key
  register: ssl_key

- name: Self-sign SSL Certificate when not present
  expect:
    command: openssl req -new -x509 -sha256 -newkey rsa:2048 -days 365 -nodes -out nginx.crt -keyout nginx.key
    chdir: /etc/nginx/ssl
    responses:
      Country Name (.*): "UK"
      State (.*): "Merseyside"
      Locality (.*): "Liverpool"
      Organization Name (.*): "Archive Analytics"
      Organizational Unit Name(.*): ""
      Common Name (.*): "Indigo"
      Email (.*): ""
  when: (ssl_certificate.stat.exists == False) or
        (ssl_key.stat.exists == False)
  become: yes
  become_method: sudo

- name: Delete default nginx config for enabled site
  file: path=/etc/nginx/sites-enabled/default state=absent
  become: yes
  become_method: sudo

- name: Delete nginx config for https mode when http mode
  file: path=/etc/nginx/sites-enabled/indigo_https state=absent
  become: yes
  become_method: sudo
  when: not https_mode

- name: Delete nginx config for http mode when https mode
  file: path=/etc/nginx/sites-enabled/indigo_http state=absent
  become: yes
  become_method: sudo
  when: https_mode

- name: Copy nginx config for https mode
  file: src=/etc/nginx/sites-available/indigo_https dest=/etc/nginx/sites-enabled/indigo_https state=link
  become: yes
  become_method: sudo
  when: https_mode

- name: Copy nginx config for http mode
  file: src=/etc/nginx/sites-available/indigo_http dest=/etc/nginx/sites-enabled/indigo_http state=link
  become: yes
  become_method: sudo
  when: not https_mode

- name: Start nginx
  service: name=nginx state=restarted
  become: yes
  become_method: sudo

- name: Start the Indigo web service
  service: name=indigo-web state=started
  become: yes
  become_method: sudo
  register: indigo-web-installed
