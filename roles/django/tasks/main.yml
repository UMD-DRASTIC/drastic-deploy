---
##############################################################################
# Create the virtualenv where we will host the drastic-web app
##############################################################################

- user:
    name: drastic
    system: yes

- file:
    path: "{{ install_dir }}"
    state: directory
    owner: drastic
    group: drastic
    mode: 0755

- name: Install Apt Packages
  block:
  - apt: update_cache=yes cache_valid_time="{{ 60*60*24 }}"
  - apt: name={{ item }} state=present
    with_items:
      - build-essential
      - virtualenv
      - netcat
      - python-dev
      - libldap2-dev
      - libsasl2-dev
      - libssl-dev
  when: ansible_connection != 'docker' and ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install Yum Packages
  yum: name={{ item }} state=present
  with_items:
    - nc
    - python-devel
    - openldap-devel
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Manually create the webapp virtualenv
  command: virtualenv -p python2.7 "{{ install_dir }}/web" creates="{{ install_dir }}/web"

- name: Clone git repo
  git:
    repo: "https://github.com/UMD-DRASTIC/drastic-web.git"
    dest: "{{ install_dir }}/web/project"
    accept_hostkey: yes
    force: yes
    update: yes
  when: not deploy_local_code
  tags: code

- name: Copy local drastic-web sources
  synchronize:
    src: ../../../drastic-web/
    dest: "{{ install_dir }}/web/project"
    recursive: yes
  when: deploy_local_code
  tags: code

- name: Upgrade pip
  pip:
    name:
      - pip
      - setuptools
    state: latest
    virtualenv: "{{ install_dir }}/web"
  tags: code

- name: Install requirements
  pip:
    requirements: "{{ install_dir }}/web/project/requirements.txt"
    virtualenv: "{{ install_dir }}/web"
  tags: code

- name: Install drastic lib into webapp
  shell: "{{ install_dir }}/web/bin/python setup.py develop"
  args:
    chdir: "{{ install_dir }}/drastic"
  tags: code

- file:
    path: "{{ install_dir }}"
    state: directory
    owner: drastic
    recurse: yes

- name: Copy Drastic-web init script
  template: src=drastic-web.service dest=/etc/systemd/system/drastic-web.service

- name: Create sysconfig directory
  file:
    path: /etc/sysconfig
    state: directory

- name: Copy Drastic-web profile.d script
  template:
    src: drastic-env.sh
    dest: /etc/profile.d/drastic-env.sh
    mode: 0755
  tags: init

- name: Copy Drastic-web environment variables file
  template:
    src: drastic-env
    dest: "{{ install_dir }}/drastic-env"
    mode: 0755
  tags: init

- file:
    path: "{{ install_dir }}"
    state: directory
    owner: drastic
    recurse: yes

- template:
    src: django_init.sh
    dest: "{{ install_dir }}/django_init.sh"
    mode: 0755
    owner: drastic
  tags: init

- name: Create entrypoint script that activates virtual environment for scripts and commands
  copy:
    dest: "{{ install_dir }}/entrypoint.sh"
    mode: 0755
    content: |
      #!/bin/sh
      . {{ install_dir }}/web/bin/activate
      exec "$@"
  tags: init

- name: Clean up the apt cache for light container image
  when: ansible_connection == 'docker'
  command: apt-get clean

- name: Initialize the Drastic database (approx. 2 minutes)
  shell: "env $(cat /opt/drastic/drastic-env | xargs) {{ install_dir }}/entrypoint.sh {{ install_dir }}/django_init.sh"
  when: ansible_connection != 'docker'
  become: yes
  become_user: drastic
  tags: init

- name: Start the Drastic web service
  systemd: name=drastic-web state=restarted enabled=yes daemon-reload=yes
  when: ansible_connection != 'docker'
  register: drastic-web-installed
  tags: code
